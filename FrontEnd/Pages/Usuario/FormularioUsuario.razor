<EditForm Model="usuarioInsert" OnValidSubmit="guardar">
    <DataAnnotationsValidator></DataAnnotationsValidator>
    <div class="row">
        <label for="username">Nombre de Usuario:</label>
        <InputText id="username" class="form-control" @bind-Value="usuarioInsert.UserName"></InputText>
        <ValidationMessage For="@(()=> usuarioInsert.UserName)" />
    </div>
    <div class="row">
        <label for="password">Contraseña:</label>
        <InputText id="password" class="form-control" @bind-Value="usuarioInsert.Password"></InputText>
        <ValidationMessage For="@(()=> usuarioInsert.Password)" />
    </div>

    <div class="row">
        <label for="correo">Correo:</label>
        <InputText id="correo" class="form-control" @bind-Value="usuarioInsert.Correo"></InputText>
        <ValidationMessage For="@(()=> usuarioInsert.Correo)" />
    </div>
    <div class="row">
        <label for="idpersona">Persona:</label>
        <InputNumber id="idpersona" class="form-control" @bind-Value="usuarioInsert.Idpersona"></InputNumber>
        <ValidationMessage For="@(()=> usuarioInsert.Idpersona)" />
    </div>
    <div class="row">
        <label for="idRol">Rol:</label>
        <InputNumber id="idRol" class="form-control" @bind-Value="usuarioInsert.IdRol"></InputNumber>
        <ValidationMessage For="@(()=> usuarioInsert.IdRol)" />
    </div>
    @if (modo == "Modificar")
    {
        @*   <div class="mb-3 row">

    <label for="url">Nombre:</label>
    <div class="col-sm-8">
    <InputCheckbox id="nombre" class="form-control" @bind-Value="@usuarioInsert.Nombre"></InputCheckbox>
    <ValidationMessage For="@(()=> usuarioInsert.Nombre)" />
    </div>

    </div>*@
    }

    <br />
    <div class="row">
        <button type="submit" class="btn btn-primary">Guardar</button>
    </div>


</EditForm>

@code {

    [Parameter] public string modo { get; set; } = "crear";
    private DTOs.Usuario.UsuarioActualizarDTO usuarioInsert = new DTOs.Usuario.UsuarioActualizarDTO();

    private async Task guardar()
    {
        await Task.Delay(2000);
    }
}
